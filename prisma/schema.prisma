model Folder {
  id     String  @id @default(cuid())
  name   String
  user   User    @relation(fields: [userId], references: [id])
  userId String
}

model Tag {
  id     String  @id @default(cuid())
  name   String
  user   User    @relation(fields: [userId], references: [id])
  userId String
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String? @unique
  emailVerified DateTime?
  image         String?
  notes         Note[]
  folders       Folder[]
  tags          Tag[]
}

model Note {
  id            String   @id @default(cuid())
  title         String   @default("") // Not başlığı
  transcript    String
  summary       String
  keyPoints     String   @default("") // Önemli noktalar
  questions     String   @default("") // Soru-cevaplar
  actionItems   String?  // Eylem maddeleri (opsiyonel)
  tags          String   // Virgülle ayrılmış etiketler
  folder        String?  // Not klasörü (opsiyonel)
  starred       Boolean  @default(false) // Yıldızlı/önemli not
  createdAt     DateTime @default(now())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  versions      NoteVersion[]
  publicShareId String?  @unique // Her not için opsiyonel paylaşım linki
  sharedWith    String?         // Virgülle ayrılmış e-posta listesi (özel paylaşım)
}

model NoteVersion {
  id         String   @id @default(cuid())
  noteId     String
  note       Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  transcript String
  summary    String
  tags       String
  folder     String?
  starred    Boolean
  createdAt  DateTime @default(now())
}
